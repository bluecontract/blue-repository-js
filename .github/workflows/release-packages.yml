name: Release Packages

on:
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to release'
        required: true
        type: string

jobs:
  release:
    name: Release Package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # needed for npm provenance
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        shell: bash

      - name: Print Environment Info
        run: npx nx report
        shell: bash

      - name: Extract package name from tag
        id: extract-package
        run: |
          RELEASE_TAG=${{ github.event.release.tag_name || inputs.tag_name }}
          PACKAGE_NAME=${RELEASE_TAG%@*}
          echo "Package to publish: $PACKAGE_NAME"
          echo "package=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build package
        run: npx nx build ${{ steps.extract-package.outputs.package }}
        shell: bash

      - name: Publish package
        run: npx nx release publish --projects=${{ steps.extract-package.outputs.package }} --dry-run
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Extract moduleBlueId and tag package
        run: |
          PACKAGE_NAME=${{ steps.extract-package.outputs.package }}
          MODULE_BLUE_ID=$(node -p "require('./libs/${PACKAGE_NAME}/package.json').blueType.moduleBlueId")
          if [ ! -z "$MODULE_BLUE_ID" ]; then
            echo "Tagging package with moduleBlueId: $MODULE_BLUE_ID"
            echo "[DRY-RUN] Would execute: npm dist-tag add @blue-repository/${PACKAGE_NAME}@$(node -p "require('./libs/${PACKAGE_NAME}/package.json').version") $MODULE_BLUE_ID"
          else
            echo "No moduleBlueId found in package.json"
            exit 1
          fi
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
