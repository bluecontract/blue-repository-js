export const text = {
  description:
    'Core primitive scalar representing Unicode text (a JSON string).\n- Authoring & wrappers:\n    detail: >\n      Instances may be authored as scalar sugar (myField: "hello") or as the\n      wrapped form (myField: { value: "hello" }). Canonical hashing uses the\n      wrapped form (§8.2.2). This type itself does NOT declare a `value`\n      field: `value` is the language wrapper for instance payloads (§2.1);\n      putting `value` on the type would fix a concrete payload on the type\n      object (a fixed-value invariant, §4.1), which is not intended.\n\n- Length semantics:\n    detail: >\n      minLength/maxLength count Unicode code points, not bytes and not UTF-16\n      code units. A character outside the BMP (e.g., "𝄞") counts as 1.\n      A CRLF pair counts as 2 code points ("\\r" + "\\n").\n\n- Regex dialect:\n    detail: >\n      `pattern` uses ECMA-262 syntax. Matching is not implicitly anchored; use\n      ^…$ for whole-string matches.\n\n- Canonical JSON vs content:\n    detail: >\n      RFC 8785 canonicalization affects only JSON encoding (escapes, key\n      ordering of parent objects). It NEVER changes the underlying code-point\n      sequence. Equality (including `enum`) compares the parsed scalar value.\n\n- Unicode normalization:\n    detail: >\n      Processors MUST NOT normalize Text by default (no NFC/NFD folding).\n      The exact code-point sequence is preserved. Any optional normalization\n      may occur only via profile-specific preprocessing in `blue` (§7.1).\n\n- Case/locale:\n    detail: >\n      No case folding or locale-sensitive collation is implied in Part I.\n      Perform such transforms explicitly during preprocessing (profile-\n      dependent) or in higher-level contracts (Part II).\n\n- Empty string:\n    detail: >\n      The empty string "" is valid unless restricted by schema (e.g., minLength > 0).\n\n- Escapes & line breaks:\n    detail: >\n      JSON escapes (\\uXXXX, \\" \\\\ \\n \\r \\t \\b \\f) are authoring/encoding\n      details only; after parsing they contribute their code points to length\n      and pattern checks.\n\n- Applicable schema:\n    detail: >\n      §5.5 string constraints: minLength, maxLength, pattern.\n',
  name: 'Text',
} as const;
