export const integer = {
  description:
    'Primitive numeric scalar for mathematical integers (ℤ).\n- Domain & arithmetic:\n    detail: >\n      Represents …, -2, -1, 0, 1, 2, … with arbitrary precision. There is no\n      fixed bit width and no overflow. Arithmetic is exact; operations may\n      fail only due to resource exhaustion.\n\n- Authoring & wrappers:\n    detail: >\n      Scalar sugar (x: 1) and wrapped form (x: { value: 1 }) are equivalent\n      for authoring; canonical hashing uses the wrapped form (§8.2.2). The\n      type does NOT declare `value` because that wrapper belongs to instances;\n      declaring it on the type would fix a payload on the type object (§2.1, §4.1).\n\n- Canonical textual form:\n    detail: >\n      Optional leading "-" for negatives, followed by one or more decimal\n      digits; no leading zeros except the single digit "0".\n\n- Schema & combination:\n    detail: >\n      §5.4 numeric constraints apply: minimum, maximum, exclusiveMinimum,\n      exclusiveMaximum, multipleOf (> 0). If multiple `multipleOf` appear in a\n      type chain, combine via least common multiple (LCM) as specified.\n\n- Equality & enums:\n    detail: >\n      Equality (incl. `enum`) compares the parsed scalar value in canonical JSON terms.\n',
  name: 'Integer',
} as const;
